@model KidoroApp.Models.viewModels.Transfo

@{
    ViewData["Title"] = "Add Transformation";
}

<section class="container mt-5">
    <h1 class="text-center">@ViewData["Title"]</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form method="post" asp-controller="Transfo" asp-action="CreateTransfo" class="form">

        <div class="card-body">
            @* Bloc *@
            <div class="card">
                <div class="row card-body">
                    <h2>Bloc</h2>

                    <div class="form-group">
                        <label for="Daty">Daty</label>
                        <input required type="date" class="form-control" id="Daty" name="Daty" />
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="BlocSelect">Bloc</label>
                                <select required id="BlocSelect" name="Bloc" class="form-select">
                                    @foreach (var bloc in Model.ListBloc)
                                    {
                                        <option value="@bloc.id" data-volume="@bloc.GetVolume()">
                                            @bloc.id
                                        </option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label for="vol-bloc">Volume(readonly)</label>
                                <input value="0" type="readonly" class="form-control" id="vol-bloc" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <br>

            @* Reste *@
            <div class="card">
                <div class="card-body">
                    <h2>Reste</h2>

                    <div class="row">
                        <div class="form-group col-4">
                            <label for="Longueur">Longueur</label>
                            <input required value="1.0" type="text" class="form-control" id="Longueur"
                                name="Longueur" />
                        </div>

                        <div class="form-group col-4">
                            <label for="largeur">Largeur</label>
                            <input required value="1.0" type="text" class="form-control" id="largeur" name="Largeur" />
                        </div>

                        <div class="form-group col-4">
                            <label for="Hauteur">Hauteur</label>
                            <input required value="1.0" type="text" class="form-control" id="hauteur" name="Hauteur" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="vol-reste">Volume Reste(readonly)</label>
                        <input value="0" type="readonly" class="form-control" id="vol-reste" />
                    </div>
                </div>
            </div>

            <br>

            @* Usuels *@
            <div class="card">
                <div class="card-body">
                    <h2>Usuels</h2>

                    @foreach (var usuel in Model.ListUsuel)
                    {
                        <div class="row">
                            <div class="form-group col-7">
                                <label for="@usuel.val">@usuel.val</label>
                                <input required value="0" type="number" class="form-control usuel-inp" id="@usuel.val"
                                    name="@usuel.val" data-val="@usuel.val" data-volume="@usuel.GetVolume()" />
                            </div>

                            <div class="col-1"></div>

                            <div class="form-group col-4">
                                <label for="vol-usuel-@usuel.val">Volume(readonly)</label>
                                <input value="0" type="readonly" class="form-control usuel-vol" id="vol-usuel-@usuel.val" />
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label for="vol-usuel-total">Volume Total des Usuels(readonly)</label>
                        <input value="0" type="readonly" class="form-control" id="vol-usuel-total" />
                    </div>
                </div>
            </div>

            <br>

            @* Control *@
            <div class="card">
                <div class="card-body">
                    <h2>Controle</h2>

                    <table class="table table-striped">
                        <tr>
                            <th>Bloc</th>
                            <th>Usuels</th>
                            <th>Reste Theorique</th>
                            <th>Reste Reel</th>
                            <th>Perte</th>
                            <th>Teta</th>
                            <th>Tolerence</th>
                        </tr>
                        <tr>
                            <td id="row-bloc"></td>
                            <td id="row-usuel"></td>
                            <td id="row-th"></td>
                            <td id="row-reel"></td>
                            <td id="row-perte"></td>
                            <td>@Model.Teta?.val</td>
                            <td id="tolerence" data-teta="@Model.Teta?.val"></td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>


        <button type="submit" class="btn btn-success btn-Transfo" id="btn-submit">
            Valider Transformation
        </button>
    </form>
</section>

<script>

    document.addEventListener( 'DOMContentLoaded', function () {

        function updateControle() {
            const volUsuels = document.getElementById( 'vol-usuel-total' ).value;
            const volBloc = document.getElementById( 'vol-bloc' ).value;
            const volResteTh = ( parseFloat( volBloc ) || 0 ) - ( parseFloat( volUsuels ) || 0 );
            const volResteReel = document.getElementById( 'vol-reste' ).value;
            const perte = ( parseFloat( volResteTh ) || 0 ) - ( parseFloat( volResteReel ) || 0 );

            const rb = document.getElementById( 'row-bloc' );
            rb.innerHTML = volBloc || '0';

            const ru = document.getElementById( 'row-usuel' );
            ru.innerHTML = volUsuels || '0';

            const rt = document.getElementById( 'row-th' );
            rt.innerHTML = volResteTh || '0';

            const rr = document.getElementById( 'row-reel' );
            rr.innerHTML = volResteReel || '0';

            const rp = document.getElementById( 'row-perte' );
            rp.innerHTML = perte || '0';

            const toler = document.getElementById( 'tolerence' );
            const teta = parseFloat( toler.getAttribute( 'data-teta' ) );
            const tolerence = volBloc * teta;
            toler.innerHTML = tolerence || '0';

            // Disabled btn
    @* const btnSubmit = document.getElementById( "btn-submit" );
                if ( tolerence < perte ) {
                btnSubmit.disabled = true;
                } else {
                btnSubmit.disabled = false;
                } *@
        }

        updateControle();







        // --------------- Up Volume Usuel -----------------
        function UpdateTotalVolumeUsuel() {
            let sum = 0;

            document.querySelectorAll( '.usuel-vol' ).forEach( inpVolume => {
                let v = inpVolume.value;
                sum += parseFloat( v );
            } );

            let inpVolTotal = document.getElementById( 'vol-usuel-total' );
            inpVolTotal.value = sum;

            updateControle();
        }

        UpdateTotalVolumeUsuel();

        function UpdateOneVolumeUsuel( inp, event ) {
            let qte = inp.value;
            let inpVol = document.getElementById( `vol-usuel-${inp.dataset.val}` );
            inpVol.value = inp.dataset.volume * qte;

            console.log( `val: ${inp.dataset.val}` );
            console.log( `volume : ${inpVol.value} | qte: ${qte}` );

            UpdateTotalVolumeUsuel();
        }

        document.querySelectorAll( '.usuel-inp' ).forEach( inp => {
            inp.addEventListener( 'input', ( e ) => UpdateOneVolumeUsuel( inp, e ) )
        } );











        // --------------- Up volume reste -----------------
        const volumeResteInput = document.getElementById( 'vol-reste' );

        const LongueurInp = document.getElementById( 'Longueur' );
        const largeurInp = document.getElementById( 'largeur' );
        const hauteurInp = document.getElementById( 'hauteur' );

        function updateVolumeReste() {
            // Si les value des inputs se termine par cm -> convertir en metre
            @* const volReste = LongueurInp.value * largeurInp.value * hauteurInp.value; *@
            
            const longueurValue = LongueurInp.value.toString().endsWith( 'cm' ) ?
                parseFloat( LongueurInp.value ) / 100 : parseFloat( LongueurInp.value );
            const largeurValue = largeurInp.value.toString().endsWith( 'cm' ) ?
                parseFloat( largeurInp.value ) / 100 : parseFloat( largeurInp.value );
            const hauteurValue = hauteurInp.value.toString().endsWith( 'cm' ) ?
                parseFloat( hauteurInp.value ) / 100 : parseFloat( hauteurInp.value );

            const volReste = longueurValue * largeurValue * hauteurValue;
            console.log( `VolReste: ${volReste}` );

            volumeResteInput.value = parseFloat( volReste ).toFixed( 4 );

            updateControle();
        }

        // Écoute des changements sur le champ de sélection du bloc
        LongueurInp.addEventListener( 'input', updateVolumeReste );
        largeurInp.addEventListener( 'input', updateVolumeReste );
        hauteurInp.addEventListener( 'input', updateVolumeReste );

        // Initialiser le volume avec les data par defaut
        updateVolumeReste();













        // ------------- decimal inputs ---------------
        const inputs = document.querySelectorAll( '.decimal' );

        inputs.forEach( input => {
            let timeoutId;

            input.addEventListener( 'input', function ( e ) {
                clearTimeout( timeoutId );

                // Délais de 2 secondes avant d'exécuter la fonction de validation
                timeoutId = setTimeout( () => {
                    validateInput( e.target );
                }, 2000 );
            } );
        } );

        function validateInput( inputElement ) {
            let value = inputElement.value;

            // Vérifie si la valeur est déjà valide
            if ( !isNaN( parseFloat( value ) ) && isFinite( value ) ) {
                let val = parseFloat( value ).toFixed( 2 );

                if ( val > 0 ) {
                    inputElement.value = val;
                }
            } else {
                inputElement.value = '';
            }
        }










        // -----------------------------------
        const volumeBlocInput = document.getElementById( 'vol-bloc' );

        // Fonction pour mettre à jour le volume du bloc
        function updateBlocVolume() {
            const selectedBloc = document.getElementById( 'BlocSelect' ).value;

            // Récupération du volume du bloc sélectionné depuis l'attribut data
            const volume = document.querySelector( `#BlocSelect option[value="${selectedBloc}"]` ).getAttribute( 'data-volume' );

            if ( volume !== null ) {
                volumeBlocInput.value = parseFloat( volume ).toFixed( 4 );

                updateControle();
            } else {
                console.warn( 'Aucun volume trouvé pour le bloc sélectionné' );
            }
        }

        // Écoute des changements sur le champ de sélection du bloc
        document.getElementById( 'BlocSelect' ).addEventListener( 'change', updateBlocVolume );

        // Initialiser le volume avec les données existantes
        updateBlocVolume();
    } );

</script>