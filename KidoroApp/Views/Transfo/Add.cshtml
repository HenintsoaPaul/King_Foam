@model KidoroApp.Models.viewModels.Transfo

@{
    ViewData["Title"] = "Add Transformation";
}

<section class="container mt-5">
    <h1 class="text-center">@ViewData["Title"]</h1>

    <form method="post" asp-controller="Transfo" asp-action="CreateTransfo" class="form">

        <div class="card-body">
            @* Bloc *@
            <div class="card">
                <div class="row card-body">
                    <h2>Bloc</h2>

                    <div class="form-group">
                        <label for="Daty">Daty</label>
                        <input required type="date" class="form-control" id="Daty" name="Daty" />
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="BlocSelect">Bloc</label>
                                <select required id="BlocSelect" name="Bloc" class="form-select">
                                    @foreach (var bloc in Model.ListBloc)
                                    {
                                        <option value="@bloc.id" data-volume="@bloc.GetVolume()">
                                            @bloc.id
                                        </option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label for="vol-bloc">Volume(readonly)</label>
                                <input value="0" type="readonly" class="form-control" id="vol-bloc" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <br>

            @* Reste *@
            <div class="card">
                <div class="card-body">
                    <h2>Reste</h2>

                    <div class="row">
                        <div class="form-group col-4">
                            <label for="Longueur">Longueur</label>
                            <input required value="1.0" type="text" class="form-control decimal" id="Longueur"
                                name="Longueur" />
                        </div>

                        <div class="form-group col-4">
                            <label for="largeur">Largeur</label>
                            <input required value="1.0" type="text" class="form-control decimal" id="largeur"
                                name="Largeur" />
                        </div>

                        <div class="form-group col-4">
                            <label for="Hauteur">Hauteur</label>
                            <input required value="1.0" type="text" class="form-control decimal" id="hauteur"
                                name="Hauteur" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="vol-reste">Volume Reste(readonly)</label>
                        <input value="0" type="readonly" class="form-control" id="vol-reste" />
                    </div>
                </div>
            </div>

            <br>

            @* Usuels *@
            <div class="card">
                <div class="card-body">
                    <h2>Usuels</h2>

                    @foreach (var usuel in Model.ListUsuel)
                    {
                        <div class="row">
                            <div class="form-group col-7">
                                <label for="@usuel.val">@usuel.val</label>
                                <input required value="0" type="number" class="form-control usuel-inp" id="@usuel.val"
                                    name="@usuel.val" data-val="@usuel.val" data-volume="@usuel.GetVolume()" />
                            </div>

                            <div class="col-1"></div>

                            <div class="form-group col-4">
                                <label for="vol-usuel-@usuel.val">Volume(readonly)</label>
                                <input value="0" type="readonly" class="form-control usuel-vol" id="vol-usuel-@usuel.val" />
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label for="vol-usuel-total">Volume Total des Usuels(readonly)</label>
                        <input value="0" type="readonly" class="form-control" id="vol-usuel-total" />
                    </div>
                </div>
            </div>
        </div>


        <button type="submit" class="btn btn-success btn-Transfo">
            Valider Transformation
        </button>
    </form>
</section>

<script>

    document.addEventListener( 'DOMContentLoaded', function () {

        // --------------- Up Volume Usuel -----------------
        function UpdateTotalVolumeUsuel() {
            let sum = 0;

            document.querySelectorAll( '.usuel-vol' ).forEach( inpVolume => {
                let v = inpVolume.value;
                sum += parseFloat( v );
            } );

            let inpVolTotal = document.getElementById( 'vol-usuel-total' );
            inpVolTotal.value = sum;
        }

        UpdateTotalVolumeUsuel();

        function UpdateOneVolumeUsuel( inp, event ) {
            let qte = inp.value;
            let inpVol = document.getElementById( `vol-usuel-${inp.dataset.val}` );
            inpVol.value = inp.dataset.volume * qte;

            console.log( `val: ${inp.dataset.val}` );
            console.log( `volume : ${inpVol.value} | qte: ${qte}` );

            UpdateTotalVolumeUsuel();
        }

        document.querySelectorAll( '.usuel-inp' ).forEach( inp => {
            inp.addEventListener( 'input', ( e ) => UpdateOneVolumeUsuel( inp, e ) )
        } );











        // --------------- Up volume reste -----------------
        const volumeResteInput = document.getElementById( 'vol-reste' );

        const LongueurInp = document.getElementById( 'Longueur' );
        const largeurInp = document.getElementById( 'largeur' );
        const hauteurInp = document.getElementById( 'hauteur' );

        function updateVolumeReste() {
            const volReste = LongueurInp.value * largeurInp.value * hauteurInp.value;
            console.log( `VolReste: ${volReste}` );

            volumeResteInput.value = parseFloat( volReste ).toFixed( 4 );
        }

        // Écoute des changements sur le champ de sélection du bloc
        LongueurInp.addEventListener( 'input', updateVolumeReste );
        largeurInp.addEventListener( 'input', updateVolumeReste );
        hauteurInp.addEventListener( 'input', updateVolumeReste );

        // Initialiser le volume avec les data par defaut
        updateVolumeReste();













        // ------------- decimal inputs ---------------
        const inputs = document.querySelectorAll( '.decimal' );

        inputs.forEach( input => {
            let timeoutId;

            input.addEventListener( 'input', function ( e ) {
                clearTimeout( timeoutId );

                // Délais de 2 secondes avant d'exécuter la fonction de validation
                timeoutId = setTimeout( () => {
                    validateInput( e.target );
                }, 2000 );
            } );
        } );

        function validateInput( inputElement ) {
            let value = inputElement.value;

            // Vérifie si la valeur est déjà valide
            if ( !isNaN( parseFloat( value ) ) && isFinite( value ) ) {
                let val = parseFloat( value ).toFixed( 2 );

                if ( val > 0 ) {
                    inputElement.value = val;
                } else {
                    inputElement.value = '';
                }
            } else {
                inputElement.value = '';
            }
        }










        // -----------------------------------
        const volumeBlocInput = document.getElementById( 'vol-bloc' );

        // Fonction pour mettre à jour le volume du bloc
        function updateBlocVolume() {
            const selectedBloc = document.getElementById( 'BlocSelect' ).value;

            // Récupération du volume du bloc sélectionné depuis l'attribut data
            const volume = document.querySelector( `#BlocSelect option[value="${selectedBloc}"]` ).getAttribute( 'data-volume' );

            if ( volume !== null ) {
                volumeBlocInput.value = parseFloat( volume ).toFixed( 4 );
            } else {
                console.warn( 'Aucun volume trouvé pour le bloc sélectionné' );
            }
        }

        // Écoute des changements sur le champ de sélection du bloc
        document.getElementById( 'BlocSelect' ).addEventListener( 'change', updateBlocVolume );

        // Initialiser le volume avec les données existantes
        updateBlocVolume();
    } );

</script>